// Mocks generated by Mockito 5.4.2 from annotations
// in musync/test/features/auth/presentation/viewmodel/login_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter/foundation.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:flutter/src/widgets/notification_listener.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:musync/core/failure/error_handler.dart' as _i9;
import 'package:musync/core/network/hive/hive_queries.dart' as _i3;
import 'package:musync/features/auth/domain/entity/user_entity.dart' as _i10;
import 'package:musync/features/auth/domain/repository/auth_repository.dart'
    as _i2;
import 'package:musync/features/auth/domain/use_case/auth_use_case.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIAuthRepository_0 extends _i1.SmartFake
    implements _i2.IAuthRepository {
  _FakeIAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHiveQueries_1 extends _i1.SmartFake implements _i3.HiveQueries {
  _FakeHiveQueries_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_3 extends _i1.SmartFake implements _i5.Widget {
  _FakeWidget_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_4 extends _i1.SmartFake
    implements _i5.InheritedWidget {
  _FakeInheritedWidget_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_5 extends _i1.SmartFake
    implements _i6.DiagnosticsNode {
  _FakeDiagnosticsNode_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i6.TextTreeConfiguration? parentConfiguration,
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [AuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUseCase extends _i1.Mock implements _i7.AuthUseCase {
  @override
  _i2.IAuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.IAuthRepository);
  @override
  _i3.HiveQueries get hiveQueries => (super.noSuchMethod(
        Invocation.getter(#hiveQueries),
        returnValue: _FakeHiveQueries_1(
          this,
          Invocation.getter(#hiveQueries),
        ),
        returnValueForMissingStub: _FakeHiveQueries_1(
          this,
          Invocation.getter(#hiveQueries),
        ),
      ) as _i3.HiveQueries);
  @override
  _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>> logout() =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue:
            _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>.value(
                _FakeEither_2<_i9.ErrorModel, _i10.UserEntity>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>.value(
                _FakeEither_2<_i9.ErrorModel, _i10.UserEntity>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>);
  @override
  _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>.value(
                _FakeEither_2<_i9.ErrorModel, _i10.UserEntity>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>.value(
                _FakeEither_2<_i9.ErrorModel, _i10.UserEntity>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>);
  @override
  _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>> signup({
    required String? email,
    required String? password,
    required String? username,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [],
          {
            #email: email,
            #password: password,
            #username: username,
          },
        ),
        returnValue:
            _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>.value(
                _FakeEither_2<_i9.ErrorModel, _i10.UserEntity>(
          this,
          Invocation.method(
            #signup,
            [],
            {
              #email: email,
              #password: password,
              #username: username,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>.value(
                _FakeEither_2<_i9.ErrorModel, _i10.UserEntity>(
          this,
          Invocation.method(
            #signup,
            [],
            {
              #email: email,
              #password: password,
              #username: username,
            },
          ),
        )),
      ) as _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>);
  @override
  _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>> googleLogin() =>
      (super.noSuchMethod(
        Invocation.method(
          #googleLogin,
          [],
        ),
        returnValue:
            _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>.value(
                _FakeEither_2<_i9.ErrorModel, _i10.UserEntity>(
          this,
          Invocation.method(
            #googleLogin,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>.value(
                _FakeEither_2<_i9.ErrorModel, _i10.UserEntity>(
          this,
          Invocation.method(
            #googleLogin,
            [],
          ),
        )),
      ) as _i8.Future<_i4.Either<_i9.ErrorModel, _i10.UserEntity>>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i5.BuildContext {
  @override
  _i5.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_3(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_3(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i5.Widget);
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.InheritedWidget dependOnInheritedElement(
    _i5.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_4(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_4(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i5.InheritedWidget);
  @override
  void visitAncestorElements(_i5.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void visitChildElements(_i5.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispatchNotification(_i11.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.DiagnosticsNode describeElement(
    String? name, {
    _i6.DiagnosticsTreeStyle? style = _i6.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i6.DiagnosticsNode);
  @override
  _i6.DiagnosticsNode describeWidget(
    String? name, {
    _i6.DiagnosticsTreeStyle? style = _i6.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i6.DiagnosticsNode);
  @override
  List<_i6.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i6.DiagnosticsNode>[],
        returnValueForMissingStub: <_i6.DiagnosticsNode>[],
      ) as List<_i6.DiagnosticsNode>);
  @override
  _i6.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_5(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i6.DiagnosticsNode);
}
